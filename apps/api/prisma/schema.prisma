// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  password   String?
  name       String?
  avatar     String?
  role       Role     @default(USER)
  isActive   Boolean  @default(true)
  isVerified Boolean  @default(false)
  isAdmin    Boolean  @default(false)
  googleId   String?  @unique
  appleId    String?  @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  posts             Post[]
  courses           Course[]
  courseEnrollments CourseEnrollment[]
  comments          Comment[]
  ratings           Rating[]
  scholarships      ScholarshipApplication[]

  @@map("users")
}

enum Role {
  ADMIN
  TEACHER
  USER
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts   Post[]
  courses Course[]

  @@map("categories")
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts   Post[]
  courses Course[]

  @@map("tags")
}

model Post {
  id        String   @id @default(uuid())
  title     String
  content   String
  slug      String   @unique
  excerpt   String?
  featured  Boolean  @default(false)
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String

  // Relations
  author     User       @relation(fields: [authorId], references: [id])
  categories Category[]
  tags       Tag[]
  comments   Comment[]

  @@map("posts")
}

model Course {
  id          String   @id @default(uuid())
  title       String
  description String
  slug        String   @unique
  price       Float    @default(0)
  discount    Float?
  featured    Boolean  @default(false)
  published   Boolean  @default(false)
  thumbnail   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String

  // Relations
  author      User                @relation(fields: [authorId], references: [id])
  categories  Category[]
  tags        Tag[]
  sections    CourseSection[]
  enrollments CourseEnrollment[]
  ratings     Rating[]
  comments    Comment[]
  programs    GovernmentProgram[]

  @@map("courses")
}

model CourseSection {
  id        String   @id @default(uuid())
  title     String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId  String

  // Relations
  course  Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons CourseLesson[]

  @@map("course_sections")
}

model CourseLesson {
  id        String   @id @default(uuid())
  title     String
  content   String
  videoUrl  String?
  order     Int
  duration  Int? // in minutes
  free      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sectionId String

  // Relations
  section     CourseSection      @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  assignments CourseAssignment[]

  @@map("course_lessons")
}

model CourseAssignment {
  id        String   @id @default(uuid())
  title     String
  content   String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lessonId  String

  // Relations
  lesson CourseLesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("course_assignments")
}

model CourseEnrollment {
  id        String           @id @default(uuid())
  status    EnrollmentStatus @default(ACTIVE)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  userId    String
  courseId  String

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
  @@map("course_enrollments")
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELED
}

model Rating {
  id        String   @id @default(uuid())
  value     Int // 1-5 stars
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  courseId  String

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
  @@map("ratings")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  courseId  String?
  postId    String?

  // Relations
  user   User    @relation(fields: [userId], references: [id])
  course Course? @relation(fields: [courseId], references: [id])
  post   Post?   @relation(fields: [postId], references: [id])

  @@map("comments")
}

model GovernmentProgram {
  id          String   @id @default(uuid())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  courses Course[]

  @@map("government_programs")
}

model Scholarship {
  id          String   @id @default(uuid())
  name        String
  description String
  amount      Float
  slots       Int
  deadline    DateTime
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  applications ScholarshipApplication[]

  @@map("scholarships")
}

model ScholarshipApplication {
  id            String            @id @default(uuid())
  status        ApplicationStatus @default(PENDING)
  motivation    String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  userId        String
  scholarshipId String

  // Relations
  user        User        @relation(fields: [userId], references: [id])
  scholarship Scholarship @relation(fields: [scholarshipId], references: [id])

  @@unique([userId, scholarshipId])
  @@map("scholarship_applications")
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}
